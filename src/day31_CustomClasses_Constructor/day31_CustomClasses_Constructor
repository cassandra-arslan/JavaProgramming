Java Day31
Topic: Constructor

package name: day31_Constructors

Constructor

• A special method that every class must have.
• It’s used when we create objects of a class.
• We can use constructors to initialize the object’s instance variables.
• Execution of a constructor always depends on the object.


Creating Constructors

• Constructor is a special method that matches the name of the class and has no return type nor a specifier.

            syntax:
               Access-Modifiers ClassName(Parameter){

               }
  used for creating objects
  Execution depends on the object


Types of Constructors: No-Argument

• A constructor that has no parameter.
• Also known as default constructor.
• If we do not define constructor is a class, then compiler creates default constructor

```
public Class Car{
	public Car(){

	}
}
```

Types of Constructors: Parameterized

• A constructor that has parameters.
• If we want to initialize the fields (instance variables) of the class with our own values, then we pass parameters to the constructor.
```
public class Employee{
	public Employee(int age){

	}
}
```

Constructor Overloading
• We can have multiple constructors in a class by implementing method overloading.

public class Dog{
	public Dog(){
	// no-arg constructor
	}
	public Dog(int age){
	//constructor with int argument
	}
	public Dog(String breed){
	//constructor with String argument
	}
}


//SETINFO
Person person1 = new Person();
person1.setInfo(“Grant”, ‘M’, 39)

//CONSTRUCTOR
Person person1 = new Person("Grant", 'M', 39);
**Constructor let's us input all arguments in parameters right away without calling the setInfo method

CONSTRUCTOR
As the name suggests it is a terminology been used to construct something in our programs. So basically if we think deeper we always were declaring variables and later initializing them. Java being object-oriented language our goal is to bring code closer to real-world where we create objects now somebody is needed to look over the construction of these objects to get to how they are internally working.

How constructors are different from methods in Java?
~Constructors must have the same name as the class within which it is defined while it is not necessary for the method in java.
~Constructors do not return any type while method(s) have the return type or void if does not return any value.
~Constructors are called only once at the time of Object creation while method(s) can be called any number of time.

class Geek
{
  .......

  // A Constructor
  new Geek() {}

  .......
}

// We can create an object of the above class
// using the below statement. This statement
// calls above constructor.
Geek obj = new Geek();

Remember: There are certain rules for writing constructor as follows:
~Constructor(s) of a class must have the same name as the class name in which it resides.
~A constructor in Java can not be abstract, final, static and Synchronized.
~Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.
So by far, we have learned constructors are used to initializing the object’s state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation.

Think of a Box. If we talk about a box class then it will have some class variables (say length, breadth, and height). But when it comes to creating its object(i.e Box will now exist in the computer’s memory), then can a box be there with no value defined for its dimensions. The answer is no.
So constructors are used to assigning values to the class variables at the time of object creation, either explicitly done by the programmer or by Java itself (default constructor).

When is a Constructor called?
Each time an object is created using a new() keyword, at least one constructor (it could be the default constructor) is invoked to assign initial values to the data members of the same class.

primarily there are two types of constructors in java:
No-argument constructor
Parameterized Constructor

Type 1: No-argument constructor:

 A constructor that has no parameter is known as the default constructor. If we don’t define a constructor in a class, then the compiler creates default constructor(with no arguments) for the class. And if we write a constructor with arguments or no-arguments then the compiler does not create a default constructor.
Default constructor provides the default values to the object like 0, null, etc. depending on the type.

Type 2: Parameterized Constructor

A constructor that has parameters is known as parameterized constructor. If we want to initialize fields of the class with our own values, then use a parameterized constructor.

JustLike methods, we can overload constructors for creating objects in different ways. Compiler differentiates constructors on the basis of numbers of parameters, types of the parameters, and order of the parameters.


// Java Program to illustrate constructor overloading
// using same task (addition operation ) for different
// types of arguments.
import java.io.*;

class Geek
{
    // constructor with one argument
    Geek(String name)
    {
        System.out.println("Constructor with one " +
                      "argument - String : " + name);
    }

    // constructor with two arguments
    Geek(String name, int age)
    {

        System.out.println("Constructor with two arguments : " +
                " String and Integer : " + name + " "+ age);

    }

    // Constructor with one argument but with different
    // type than previous..
    Geek(long id)
    {
        System.out.println("Constructor with one argument : " +
                                            "Long : " + id);
    }
}

class GFG
{
    public static void main(String[] args)
    {
        // Creating the objects of the class named 'Geek'
        // by passing different arguments

        // Invoke the constructor with one argument of
        // type 'String'.
        Geek geek2 = new Geek("Shikhar");

        // Invoke the constructor with two arguments
        Geek geek3 = new Geek("Dharmesh", 26);

        // Invoke the constructor with one argument of
        // type 'Long'.
        Geek geek4 = new Geek(325614567);
    }
}